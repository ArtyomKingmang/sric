import sric::*;

fun testHashMap() {
    var map = HashMap$<String, Int>{};
    map.set("1", 1);
    map.set("2", 2);

    var i =  map.getPtr("1");
    printf("%d\n", *i);
}

fun testHashMap2() {
    var map = HashMap$<Int, String>{};
    map.set(1, "1");
    map.set(2, "2");

    unsafe {
        var i =  map[1];
        printf("%s\n", i.c_str());
    }
}

fun testHashMap3() {
    var map = HashMap$<String, Int>{};

    for (var i=0; i<10; ++i) {
        map.set(String::fromInt32(i), i);
    }

    var t =  map.getPtr("1");
    printf("%d\n", *t);

    map.eachWhile(fun(v:& const Int, k:& const String): Bool {
        unsafe {
            printf("%d:%s\n", v, k.c_str());
        }
        return true;
    });
}

fun testHashMap4() {
    var map = HashMap$<String, own*? Int>{};

    for (var i=0; i<10; ++i) {
        var p = new Int;
        *p = i;
        map.set(String::fromInt32(i), move p);
    }

    var t =  map.getPtr("1");
    printf("%d\n", **t);

    map.eachWhile(fun(v:& const own*? Int, k:& const String): Bool {
        unsafe {
            printf("%d:%s\n", *v, k.c_str());
        }
        return true;
    });
}
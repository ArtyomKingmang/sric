
import sric::*;

struct C : B, I {
  override fun foo() {
    printf("C::foo\n");
  }
}

trait I {
  abstract fun foo();
}

virtual struct B {
  var a: Int;
  virtual fun foo() { printf("B::foo\n"); }
}

fun testInherit() {
    var x = new C;
    x.foo();

    var p1: * B = x;
    var p3: * I = p1 as * I;
    p3.foo();
    var p4: * I = x as * I;
    
    p4.foo();

    var b1 = p1 is * I;

    printf("x is I: %d\n", b1);
}

fun testDector() {
    var x : own* I = new C;
    //var x : own* I = move a;
    x.foo();
}

fun testDynamicCast() {
    var p : own*? B = new C;
    var i = p as * C;
    i.foo();
}

fun testCast() : own* I {
  var x: own*? C;
  //var a: own* C = move x;
  return x;
}
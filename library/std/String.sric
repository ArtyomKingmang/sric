//@#include "Str.h"

extern noncopyable struct String {
    fun c_str() const: raw* Int8;
    fun size() const: Int;

    operator fun get(i: Int) const: Int8;

    fun iequals(other: &const String) const: Bool;
    fun contains(other: &const String) const: Bool;
    fun startsWith(other: &const String) const: Bool;
    fun endsWith(other: &const String) const: Bool;

    fun find(other: &const String, start: Int = 0) const: Int;

    fun replace(src: &const String, dst: &const String);
    fun split(sep: &const String) const: DArray$<String>;
    fun substr(pos:Int, len:Int = -1) const: String;

    operator fun plus(other: &const String) const: String;
    fun add(cstr: raw*const Int8);

    fun trimEnd();
    fun trimStart();
    fun trim() { trimStart(); trimEnd(); }
    fun removeLastChar();

    fun toLower() const: String;
    fun toUpper() const: String;

    fun toInt() const: Int32;
    fun toLong() const: Int64;
    fun toFloat() const: Float32;
    fun toDouble() const: Float64;

    fun isEmpty() const: Bool;

    fun hashCode() const: Int;
    operator fun compare(p: &const String) const : Int;

    extern static fun fromInt32(i: Int32): String;
    extern static fun fromInt64(i: Int64): String;
    extern static fun fromFloat64(f: Float64): String;
    extern static fun fromFloat32(f: Float32): String;

    /**
    * 'printf' style format
    */
    extern static fun format(format: raw*const Int8, args: ...): String;
}


extern fun asStr(cstr: raw*const Int8): String;
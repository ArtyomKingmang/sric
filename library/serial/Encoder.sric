import sric::*;
import jsonc::*;

struct Encoder {
    var allocator: JsonAllocator;

    unsafe fun encode(obj: *Void, typeName: raw*? const Int8 = null, isHiml: Bool = true): String {
        var node = encodeObj(obj, typeName);
        var json : String;
        if (node != null) {
            node.to_json(json, isHiml);
        }
        return json;
    }

    private unsafe fun encodeAny(obj: raw*? Int8, typeNameS: &TypeName, offset: Int = 0): raw*? JsonNode {
        if (obj == null) return null;
        var typeName = typeNameS.name.c_str();

        switch (typeName[0]) {
        case 'I':
            if (strcmp(typeName, "Int") == 0 || strcmp(typeName, "Int32") == 0) {
                var v = (obj+offset) as raw*Int32;
                return allocator.alloc_int(*v);
            }
            else if (strcmp(typeName, "Int64") == 0) {
                var v = (obj+offset) as raw*Int64;
                return allocator.alloc_int(*v);
            }
            else if (strcmp(typeName, "Int16") == 0) {
                var v = (obj+offset) as raw*Int16;
                return allocator.alloc_int(*v);
            }
            else if (strcmp(typeName, "Int8") == 0) {
                var v = (obj+offset) as raw*Int8;
                return allocator.alloc_int(*v);
            }
        case 'U':
            if (strcmp(typeName, "UInt32") == 0) {
                var v = (obj+offset) as raw*UInt32;
                return allocator.alloc_int(*v);
            }
            else if (strcmp(typeName, "UInt64") == 0) {
                var v = (obj+offset) as raw*UInt64;
                return allocator.alloc_int(*v);
            }
            else if (strcmp(typeName, "UInt16") == 0) {
                var v = (obj+offset) as raw*UInt16;
                return allocator.alloc_int(*v);
            }
            else if (strcmp(typeName, "UInt8") == 0) {
                var v = (obj+offset) as raw*UInt8;
                return allocator.alloc_int(*v);
            }
        case 'F':
            if (strcmp(typeName, "Float") == 0 || strcmp(typeName, "Float64") == 0) {
                var v = (obj+offset) as raw* Float64;
                return allocator.alloc_float(*v);
            }
            else if (strcmp(typeName, "Float32") == 0) {
                var v = (obj+offset) as raw* Float32;
                return allocator.alloc_float(*v);
            }
        case 's':
            if (strcmp(typeName, "sric::String") == 0) {
                var v = unsafeCast$<raw*String>(obj+offset);
                return allocator.alloc_str(v.c_str());
            }
            // else if (strcmp(typeName, "raw* Int8") == 0) {
            //     var v = (obj+offset) as raw* raw*? Int8;
            //     fnode = allocator.alloc_str(*v);
            // }
            else if (strcmp(typeName, "sric::DArray") == 0) {
                if (typeNameS.genericArgs.size() == 0) return null;
                var v = unsafeCast$<raw*List>(obj+offset);
                return encodeDArray(v, typeNameS.genericArgs[0]);
            }
        case 'o':
            if (strcmp(typeName, "own*") == 0) {
                if (typeNameS.genericArgs.size() == 0) return null;
                var v = unsafeCast$<raw* own*? Void>(obj+offset);
                return encodeObj(*v, typeNameS.genericArgs[0].name.c_str());
            }
        }

        if (typeNameS.genericArgs.size() == 0) {
            //value type
            var v = unsafeCast$<raw* Void>(obj+offset);
            return encodeObj(v, typeName);
        }

        return null;
    }

    private unsafe fun encodeDArray(arr: raw*List, elemType: &TypeName): raw*? JsonNode {
        var node = allocator.allocNode(Type::Array);
        var elemSize = sizeOfType(elemType.name.c_str());
        for (var i=0; i<arr.size(); ++i) {
            var p = unsafeCast$<raw*Int8>(arr.data());
            var elem = p + elemSize * i;
            var elemNode = encodeAny(elem, elemType);
            if (elemNode != null) {
                node.insert(elemNode);
            }
        }
        node.reverse();
        return node;
    }

    private unsafe fun encodeObj(obj: raw*? Void, elemName: raw*? const Int8 = null): raw*? JsonNode {
        if (obj == null) return null;

        if (elemName == null) {
            elemName = typeOf(obj);
        }

        var rtype = findRType(elemName);
        if (rtype == null) {
            return null;
        }

        if (rtype.inheritances.size() > 0 || (rtype.flags & RFlags::Virtual) != 0 || (rtype.flags & RFlags::Abstract) != 0) {
            var realName = typeOf(obj);
            if (strcmp(realName, elemName) != 0) {
                elemName = realName;
                var rtype = findRType(elemName);
                if (rtype == null) {
                    return null;
                }
            }
        }

        if (rtype.flags & RFlags::Reflect == 0) {
            return null;
        }

        if ((rtype.kind & RTypeKind::Enum) != 0) {
            var value:raw* Int = unsafeCast$<raw*Int>(obj);
            for (var i = 0; i<rtype.fields.size(); ++i) {
                var f = rtype.fields[i];
                if (f.enumValue == *value) {
                    return allocator.alloc_str(f.name);
                }
            }
            return null;
        }

        var node = allocator.allocNode(Type::Object);
        for (var i = 0; i<rtype.fields.size(); ++i) {
            var f = rtype.fields[i];

            if (!isSerializable(f)) {
                continue;
            }

            var typeName: TypeName = TypeName::parse(f.baseType);
            var vn = encodeAny(unsafeCast$<raw*Int8>(obj), typeName, f.offset);
            if (vn != null) {
                var fname = f.name;
                if (strcmp(f.name, "children") == 0) {
                    fname = "_children";
                }
                node.insert_pair(fname, vn);
            }
        }

        node.insert_pair("_type", allocator.alloc_str(elemName));

        node.reverse();
        return node;
    }
}
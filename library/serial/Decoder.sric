import sric::*;
import jsonc::*;
import cstd::*;

struct Decoder {
    unsafe fun decode(str: &String): own*? Void {
        var allocator: JsonAllocator;
        var parser = HimlParser { .init(&allocator); };

        // var stream = FileStream::open("test.himl", "rb");
        // var str = stream.readAllStr();
        var value0 = parser.parse(str.data() as raw* Int8);

        //check error
        if (value0 == null || parser.get_error()[0] != 0) {
            printf("parser json error: %s\n", parser.get_error());
            return null;
        }

        return decodeObj(value0, null, null);
    }

    private unsafe fun decodeAny(node: raw*Value, obj: raw*? Int8, typeNameS: &TypeName, offset: Int = 0): Bool {
        var typeName = typeNameS.name.c_str();
        switch (typeName[0]) {
        case 'I':
            if (strcmp(typeName, "Int") == 0 || strcmp(typeName, "Int32") == 0) {
                var v = (obj+offset) as raw*Int32;
                *v = node.as_int();
                return true;
            }
            else if (strcmp(typeName, "Int64") == 0) {
                var v = (obj+offset) as raw*Int64;
                *v = node.as_int();
                return true;
            }
            else if (strcmp(typeName, "Int16") == 0) {
                var v = (obj+offset) as raw*Int16;
                *v = node.as_int();
                return true;
            }
            else if (strcmp(typeName, "Int8") == 0) {
                var v = (obj+offset) as raw*Int8;
                *v = node.as_int();
                return true;
            }
        case 'U':
            if (strcmp(typeName, "UInt32") == 0) {
                var v = (obj+offset) as raw*UInt32;
                *v = node.as_int();
                return true;
            }
            else if (strcmp(typeName, "UInt64") == 0) {
                var v = (obj+offset) as raw*UInt64;
                *v = node.as_int();
                return true;
            }
            else if (strcmp(typeName, "UInt16") == 0) {
                var v = (obj+offset) as raw*UInt16;
                *v = node.as_int();
                return true;
            }
            else if (strcmp(typeName, "UInt8") == 0) {
                var v = (obj+offset) as raw*UInt8;
                *v = node.as_int();
                return true;
            }
        case 'F':
            if (strcmp(typeName, "Float") == 0 || strcmp(typeName, "Float64") == 0) {
                var v = (obj+offset) as raw* Float64;
                *v = node.as_float();
                return true;
            }
            else if (strcmp(typeName, "Float32") == 0) {
                var v = (obj+offset) as raw* Float32;
                *v = node.as_float();
                return true;
            }
        case 's':
            if (strcmp(typeName, "sric::String") == 0) {
                var v = unsafeCast$<raw*String>(obj+offset);
                *v = node.as_str();
                return true;
            }
            // else if (strcmp(typeName, "raw* Int8") == 0) {
            //     var v = (obj+offset) as raw* raw*? Int8;
            //     *v = node.as_str();
            // }
            else if (strcmp(typeName, "sric::DArray") == 0) {
                if (typeNameS.genericArgs.size() == 0) return false;
                var v = unsafeCast$<raw*List>(obj+offset);
                if (node.type() == Type::Object) {
                    node = node.children();
                    if (node == null) return false;
                }
                decodeDArray(node, v, typeNameS.genericArgs[0]);
                return true;
            }
        case 'o':
            if (strcmp(typeName, "own*") == 0) {
                var v = unsafeCast$<raw* own*? Void>(obj+offset);
                var d = decodeObj(node, null, typeName);
                if (d != null) {
                    *v = move d;
                    return true;
                }
                return false;
            }
        }

        if (typeNameS.genericArgs.size() == 0) {
            //value type
            var v = unsafeCast$<raw* Void>(obj+offset);
            decodeObj(node, v, typeName);
            return true;
        }
        return false;
    }

    private unsafe fun decodeDArray(node: raw*Value, arr: raw* List, elemType: &TypeName) {
        if (node.type() != Type::Array) {
            scError("serial", "expect array: %s");
            return;
        }
        var elemSize = sizeOfType(elemType.name.c_str());
        var size = node.size();
        arr.clear();
        arr.resize(size);
        
        var p = unsafeCast$<raw*Int8>(arr.data());
        var i = 0;
        for (var b = node.begin(); b.noteq(node.end()); b.next()) {
            var elem = p + elemSize * i;
            var subNode = b.get();
            decodeAny(subNode, elem, elemType);
            ++i;
        }
    }

    private unsafe fun decodeObj(node: raw*Value, dst: raw*? Void, typeName: raw*? const Int8): own*? Void {
        var name: raw*? const Int8;
        if (node.type() == Type::Object) {
            var objType = node.objectType();
            if (objType != null) {
                name = objType.as_str();
            }
            else {
                return null;
            }
        }
        else {
            name = typeName;
        }

        var rtype = findRType(name);
        if (rtype == null) {
            scError("serial", "unknow type: %s", name);
            return null;
        }

        if (rtype.flags & RFlags::Reflect == 0) {
            //scError("serial", "unsupport type: %s", name);
            return null;
        }

        if ((rtype.kind & RTypeKind::Enum) != 0) {
            var str = node.as_str();
            for (var i = 0; i<rtype.fields.size(); ++i) {
                var f = rtype.fields[i];
                if (strcmp(f.name, str) == 0) {
                    var value:raw* Int = unsafeCast$<raw*Int>(dst);
                    *value = f.enumValue;
                    return null;
                }
            }
            return null;
        }

        if (node.type() != Type::Object) {
            return null;
        }

        if (rtype.ctor == null) {
            scError("serial", "can't create: %s", name);
            return null;
        }

        var obj: own*? Void;
        if (dst == null) {
            obj = newInstance(*rtype);
            dst = obj;
        }
        decodeFields(dst, rtype, node);

        var onDeserialize = findInstanceMethod(rtype, "_onDeserialize");
        if (onDeserialize != null) {
            if (onDeserialize.params.size() == 0 && 
                    (onDeserialize.returnBaseType == null || strcmp(onDeserialize.returnBaseType, "Void") == 0) && 
                    onDeserialize.pointer != null) {
                callPVFunc(onDeserialize.pointer, dst);
            }
            else {
                scError("serial", "Bad _onDeserialize function", name);
            }
        }

        return obj;
    }

    private unsafe fun findInstanceMethod(rtype: raw*? RType, name: raw* const Int8): raw*? RFunc {
        if (rtype == null) {
            return null;
        }
        if (rtype.flags & RFlags::Reflect == 0) {
            return null;
        }

        for (var i = 0; i<rtype.funcs.size(); ++i) {
            var f = rtype.funcs[i];
            if (strcmp(f.name, name) == 0) {
                return &f;
            }
        }

        if (rtype.superType != null) {
            var superType = findRType(rtype.superType);
            return findInstanceMethod(superType, name);
        }
        return null;
    }

    private unsafe fun decodeFields(obj: raw* Void, rtype: raw*? RType, node: raw* Value) {
        if (rtype == null) {
            return;
        }
        if (rtype.flags & RFlags::Reflect == 0) {
            return;
        }
        if (rtype.superType != null) {
            var superType = findRType(rtype.superType);
            decodeFields(obj, superType, node);
        }

        for (var i = 0; i<rtype.fields.size(); ++i) {
            var f = rtype.fields[i];
            
            if (!isSerializable(f)) {
                continue;
            }

            var fname = f.name;
            if (strcmp(f.name, "children") == 0) {
                fname = "_children";
            }
            var subNode = node.get(fname);
            if (subNode == null) {
                continue;
            }
            var typeName: TypeName = TypeName::parse(f.baseType);
            decodeAny(subNode, unsafeCast$<raw*Int8>(obj), typeName, f.offset);
        }
    }
}